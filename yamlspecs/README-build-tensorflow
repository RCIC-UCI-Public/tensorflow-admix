#!/bin/bash

# track of built steps. 
# will need to be run via Makefile as a separate
# target or directly via shell script. Takes too long ~14hrs
# to compile build_pip_package

# Checkout tensorflow from git and switch to last branch
git clone https://github.com/tensorflow/tensorflow
cd tensorflow
git describe --tags
git checkout r2.0
git branch
 
# Alternatively get a known release from github https://github.com/tensorflow/tensorflow/tags
wget https://github.com/tensorflow/tensorflow/archive/v2.0.0.tar.gz
tar xzvf v2.0.0.tar.gz
cd tensorflow-2.0.0/

# Load needed modules
# first 4 - for main build
# foundation for git that understands -C flag
module load bazel/0.26.1 
module load cuda/10.1.243_418.87.00 
module load computecpp/1.1.4 
module load tensorRT/6.0.1.5 
module load foundation

### these are executed in tensorflow/ (git repo)
# configure the build.Rub configure ocmmand abnd anwer the questions.
# the result is .tf_configure.bazelrc in the current directory
# Note .bazelrc is included in the distro
./configure

# Below is a configure session script Defaults are taken (hit return) 
# where acceptable values were provided or hinted. 
WARNING: --batch mode is deprecated. Please instead explicitly shut down your Bazel server using the command "bazel shutdown".
You have bazel 0.26.1- (@non-git) installed.
Please specify the location of python. [Default is /opt/apps/python/3.8.0/bin/python]: 

Found possible Python library paths:
  /opt/apps/python/3.8.0/lib/python3.8/site-packages
  /opt/apps/tensorRT/6.0.1.5/lib/python3.8/site-packages
Please input the desired Python library path to use.  Default is [/opt/apps/python/3.8.0/lib/python3.8/site-packages]

Do you wish to build TensorFlow with XLA JIT support? [Y/n]: 
XLA JIT support will be enabled for TensorFlow.

Do you wish to build TensorFlow with OpenCL SYCL support? [y/N]: 
No OpenCL SYCL support will be enabled for TensorFlow.

Do you wish to build TensorFlow with ROCm support? [y/N]: 
No ROCm support will be enabled for TensorFlow.

Do you wish to build TensorFlow with CUDA support? [y/N]: y
CUDA support will be enabled for TensorFlow.

Do you wish to build TensorFlow with TensorRT support? [y/N]: y
TensorRT support will be enabled for TensorFlow.

Could not find any cuda.h matching version '' in any subdirectory:
        ''
        'include'
        'include/cuda'
        'include/*-linux-gnu'
        'extras/CUPTI/include'
        'include/cuda/CUPTI'
of:
        '/lib64'
        '/usr'
        '/usr/lib64/dyninst'
        '/usr/lib64/mysql'
        '/usr/lib64/qt-3.3/lib'
Asking for detailed CUDA configuration...
Please specify the CUDA SDK version you want to use. [Leave empty to default to CUDA 10]: 
Please specify the cuDNN version you want to use. [Leave empty to default to cuDNN 7]: 
Please specify the TensorRT version you want to use. [Leave empty to  default to TensorRT 5]: 6
Please specify the locally installed NCCL version you want to use. [Leave empty to use http://github.com/nvidia/nccl]: 
Please specify the comma-separated list of base paths to look for CUDA libraries and headers. [Leave empty to use the default]:
/data/apps/cuda/10.1.243_418.87.00,/opt/apps/tensorRT/6.0.1.5/,/usr

Found CUDA 10.1 in:
    /data/apps/cuda/10.1.243_418.87.00/lib64
    /data/apps/cuda/10.1.243_418.87.00/include
Found cuDNN 7 in:
    /usr/lib64
    /usr/include
Found TensorRT 6 in:
    /opt/apps/tensorRT/6.0.1.5/lib
    /opt/apps/tensorRT/6.0.1.5/include

Please specify a list of comma-separated CUDA compute capabilities you want to build with.
You can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.
Please note that each additional compute capability significantly increases your build time and binary size, and that TensorFlow only supports compute capabilities >= 3.5 [Default is: 3.5,7.0]: 

Do you want to use clang as CUDA compiler? [y/N]: n
nvcc will be used as CUDA compiler.

Please specify which gcc should be used by nvcc as the host compiler. [Default is /usr/bin/gcc]: 

Do you wish to build TensorFlow with MPI support? [y/N]: 
No MPI support will be enabled for TensorFlow.

Please specify optimization flags to use during compilation when bazel option "--config=opt" is specified [Default is -march=native -Wno-sign-compare]: -Wno-sign-compare

Would you like to interactively configure ./WORKSPACE for Android builds? [y/N]: 
Not configuring the WORKSPACE for Android builds.

Preconfigured Bazel build configs. You can use any of the below by adding "--config=<>" to your build command. See .bazelrc for more details.
	--config=mkl         	# Build with MKL support.
	--config=monolithic  	# Config for mostly static monolithic build.
	--config=gdr         	# Build with GDR support.
	--config=verbs       	# Build with libverbs support.
	--config=ngraph      	# Build with Intel nGraph support.
	--config=numa        	# Build with NUMA support.
	--config=dynamic_kernels	# (Experimental) Build kernels into separate shared objects.
	--config=v2          	# Build TensorFlow 2.x instead of 1.x.
Preconfigured Bazel build configs to DISABLE default on features:
	--config=noaws       	# Disable AWS S3 filesystem support.
	--config=nogcp       	# Disable GCP support.
	--config=nohdfs      	# Disable HDFS support.
	--config=noignite    	# Disable Apache Ignite support.
	--config=nokafka     	# Disable Apache Kafka support.
	--config=nonccl      	# Disable NVIDIA NCCL support.
Configuration finished

# Check the resulting .tf_configure.bazelrc file.
# NOTE1: edit it and change -march=native to -march=core-avx2

# bazel build takes forever, On a VM with 2 cores and 8Gb memory ~14hrs
nohup bazel build --local_ram_resources=4096 --verbose_failures //tensorflow/tools/pip_package:build_pip_package >  ../build-out &

# First run failed with: 
# ERROR: /export/repositories/tensorflow-admix/yamlspecs/tensorflow-2.0.0/tensorflow/python/BUILD:328:1: C++ compilation of rule '//tensorflow/python:bfloat16_lib' failed (Exit 1)
#tensorflow/python/lib/core/bfloat16.cc:362:1: error: cannot convert 'std::nullptr_t' to 'Py_ssize_t {aka long int}' in initialization
# in the following files change
#-    nullptr,                                   // tp_print
#+    NULL,                                      // tp_print
# and save original files as 
#./tensorflow/python/eager/pywrap_tensor.cc.prev
#./tensorflow/python/eager/pywrap_tfe_src.cc.prev
#./tensorflow/python/lib/core/ndarray_tensor_bridge.cc.prev
#./tensorflow/python/lib/core/bfloat16.cc.prev
# Create a patch file for the changed 4 files and  apply
# it before running bazel again:
patch  -p0 < ../tensorflow-v.2.0.0-python.3.8.0.patch



#file bazel-bin/tensorflow/tools/pip_package/build_pip_package
#tensorflow/bazel-bin/tensorflow/tools/pip_package/build_pip_package: symbolic link to /export/repositories/tensorflow-admix/yamlspecs/tensorflow/tensorflow/tools/pip_package/build_pip_package.sh
#ll tensorflow/tools/pip_package/build_pip_package.sh
#-rwxr-xr-x 1 root root 10545 Oct  7 18:48 tensorflow/tools/pip_package/build_pip_package.sh

# build whl file
./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow.pkg

#  copy resulting wheel to sources
cp /tmp/tensorflow.pkg/tensorflow-2.0.0-cp36-cp36m-linux_x86_64.whl  ../sources/

# Use yaml file to create RPM
# Edit yaml to use above created whl file
make tensorflow.pkg
